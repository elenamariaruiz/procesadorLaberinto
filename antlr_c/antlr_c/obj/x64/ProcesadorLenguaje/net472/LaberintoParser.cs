//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Asus\Documents\GIT\howto_maze\antlr_c\antlr_c\Laberinto.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace antlr_c.Generated {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class LaberintoParser : Parser {
	public const int
		OTROS_CARACTERES=1, TILDES=2, VIDA=3, TIME=4, ALTO=5, ANCHO=6, MONEDAS=7, 
		LLAVE_A=8, LLAVE_C=9, PUNTO_COMA=10, ENEMIGOS=11, INICIO=12, FINAL=13, 
		PARENTA=14, PARENTC=15, COMA=16, DAMAGE=17, GUION=18, NUMERO=19, UTEMP=20, 
		IDENT=21, WS=22;
	public const int
		RULE_inicio = 0, RULE_directivas = 1, RULE_dimension = 2, RULE_def_monedas = 3, 
		RULE_monedas = 4, RULE_moneda = 5, RULE_def_enemigos = 6, RULE_enemigos = 7, 
		RULE_enemigo = 8, RULE_bloque = 9, RULE_start = 10, RULE_end = 11, RULE_localizaciones = 12, 
		RULE_localizacion = 13, RULE_coordenadas = 14, RULE_coord = 15;
	public static readonly string[] ruleNames = {
		"inicio", "directivas", "dimension", "def_monedas", "monedas", "moneda", 
		"def_enemigos", "enemigos", "enemigo", "bloque", "start", "end", "localizaciones", 
		"localizacion", "coordenadas", "coord"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'vida'", "'time'", "'alto'", "'ancho'", "'monedas'", 
		"'{'", "'}'", "';'", "'enemigos'", "'inicio'", "'final'", "'('", "')'", 
		"','", null, "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OTROS_CARACTERES", "TILDES", "VIDA", "TIME", "ALTO", "ANCHO", "MONEDAS", 
		"LLAVE_A", "LLAVE_C", "PUNTO_COMA", "ENEMIGOS", "INICIO", "FINAL", "PARENTA", 
		"PARENTC", "COMA", "DAMAGE", "GUION", "NUMERO", "UTEMP", "IDENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Laberinto.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LaberintoParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class InicioContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(LaberintoParser.IDENT, 0); }
		public DimensionContext dimension() {
			return GetRuleContext<DimensionContext>(0);
		}
		public DirectivasContext directivas() {
			return GetRuleContext<DirectivasContext>(0);
		}
		public BloqueContext bloque() {
			return GetRuleContext<BloqueContext>(0);
		}
		public Def_monedasContext def_monedas() {
			return GetRuleContext<Def_monedasContext>(0);
		}
		public Def_enemigosContext def_enemigos() {
			return GetRuleContext<Def_enemigosContext>(0);
		}
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILaberintoVisitor<TResult> typedVisitor = visitor as ILaberintoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_inicio);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(IDENT);
			State = 33; dimension();
			State = 34; directivas();
			State = 36;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MONEDAS) {
				{
				State = 35; def_monedas();
				}
			}

			State = 39;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ENEMIGOS) {
				{
				State = 38; def_enemigos();
				}
			}

			State = 41; bloque();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivasContext : ParserRuleContext {
		public IToken num1;
		public IToken num2;
		public ITerminalNode VIDA() { return GetToken(LaberintoParser.VIDA, 0); }
		public ITerminalNode TIME() { return GetToken(LaberintoParser.TIME, 0); }
		public ITerminalNode UTEMP() { return GetToken(LaberintoParser.UTEMP, 0); }
		public ITerminalNode[] NUMERO() { return GetTokens(LaberintoParser.NUMERO); }
		public ITerminalNode NUMERO(int i) {
			return GetToken(LaberintoParser.NUMERO, i);
		}
		public DirectivasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directivas; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.EnterDirectivas(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.ExitDirectivas(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILaberintoVisitor<TResult> typedVisitor = visitor as ILaberintoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectivas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivasContext directivas() {
		DirectivasContext _localctx = new DirectivasContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_directivas);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; Match(VIDA);
			State = 44; _localctx.num1 = Match(NUMERO);
			State = 45; Match(TIME);
			State = 46; _localctx.num2 = Match(NUMERO);
			State = 47; Match(UTEMP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionContext : ParserRuleContext {
		public IToken num1;
		public IToken num2;
		public ITerminalNode[] NUMERO() { return GetTokens(LaberintoParser.NUMERO); }
		public ITerminalNode NUMERO(int i) {
			return GetToken(LaberintoParser.NUMERO, i);
		}
		public ITerminalNode ALTO() { return GetToken(LaberintoParser.ALTO, 0); }
		public ITerminalNode ANCHO() { return GetToken(LaberintoParser.ANCHO, 0); }
		public DimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimension; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.EnterDimension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.ExitDimension(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILaberintoVisitor<TResult> typedVisitor = visitor as ILaberintoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimensionContext dimension() {
		DimensionContext _localctx = new DimensionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_dimension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ALTO) {
				{
				State = 49; Match(ALTO);
				}
			}

			State = 52; _localctx.num1 = Match(NUMERO);
			State = 54;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ANCHO) {
				{
				State = 53; Match(ANCHO);
				}
			}

			State = 56; _localctx.num2 = Match(NUMERO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_monedasContext : ParserRuleContext {
		public ITerminalNode MONEDAS() { return GetToken(LaberintoParser.MONEDAS, 0); }
		public ITerminalNode LLAVE_A() { return GetToken(LaberintoParser.LLAVE_A, 0); }
		public MonedasContext monedas() {
			return GetRuleContext<MonedasContext>(0);
		}
		public ITerminalNode LLAVE_C() { return GetToken(LaberintoParser.LLAVE_C, 0); }
		public Def_monedasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_monedas; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.EnterDef_monedas(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.ExitDef_monedas(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILaberintoVisitor<TResult> typedVisitor = visitor as ILaberintoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDef_monedas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Def_monedasContext def_monedas() {
		Def_monedasContext _localctx = new Def_monedasContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_def_monedas);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; Match(MONEDAS);
			State = 59; Match(LLAVE_A);
			State = 60; monedas();
			State = 61; Match(LLAVE_C);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonedasContext : ParserRuleContext {
		public MonedaContext[] moneda() {
			return GetRuleContexts<MonedaContext>();
		}
		public MonedaContext moneda(int i) {
			return GetRuleContext<MonedaContext>(i);
		}
		public ITerminalNode[] PUNTO_COMA() { return GetTokens(LaberintoParser.PUNTO_COMA); }
		public ITerminalNode PUNTO_COMA(int i) {
			return GetToken(LaberintoParser.PUNTO_COMA, i);
		}
		public MonedasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_monedas; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.EnterMonedas(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.ExitMonedas(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILaberintoVisitor<TResult> typedVisitor = visitor as ILaberintoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonedas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonedasContext monedas() {
		MonedasContext _localctx = new MonedasContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_monedas);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 63; moneda();
				State = 64; Match(PUNTO_COMA);
				}
				}
				State = 68;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==IDENT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonedaContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(LaberintoParser.IDENT, 0); }
		public ITerminalNode NUMERO() { return GetToken(LaberintoParser.NUMERO, 0); }
		public MonedaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moneda; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.EnterMoneda(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.ExitMoneda(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILaberintoVisitor<TResult> typedVisitor = visitor as ILaberintoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoneda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonedaContext moneda() {
		MonedaContext _localctx = new MonedaContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_moneda);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(IDENT);
			State = 71; Match(NUMERO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_enemigosContext : ParserRuleContext {
		public ITerminalNode ENEMIGOS() { return GetToken(LaberintoParser.ENEMIGOS, 0); }
		public ITerminalNode LLAVE_A() { return GetToken(LaberintoParser.LLAVE_A, 0); }
		public EnemigosContext enemigos() {
			return GetRuleContext<EnemigosContext>(0);
		}
		public ITerminalNode LLAVE_C() { return GetToken(LaberintoParser.LLAVE_C, 0); }
		public Def_enemigosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_enemigos; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.EnterDef_enemigos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.ExitDef_enemigos(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILaberintoVisitor<TResult> typedVisitor = visitor as ILaberintoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDef_enemigos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Def_enemigosContext def_enemigos() {
		Def_enemigosContext _localctx = new Def_enemigosContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_def_enemigos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(ENEMIGOS);
			State = 74; Match(LLAVE_A);
			State = 75; enemigos();
			State = 76; Match(LLAVE_C);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnemigosContext : ParserRuleContext {
		public EnemigoContext[] enemigo() {
			return GetRuleContexts<EnemigoContext>();
		}
		public EnemigoContext enemigo(int i) {
			return GetRuleContext<EnemigoContext>(i);
		}
		public ITerminalNode[] PUNTO_COMA() { return GetTokens(LaberintoParser.PUNTO_COMA); }
		public ITerminalNode PUNTO_COMA(int i) {
			return GetToken(LaberintoParser.PUNTO_COMA, i);
		}
		public EnemigosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enemigos; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.EnterEnemigos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.ExitEnemigos(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILaberintoVisitor<TResult> typedVisitor = visitor as ILaberintoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnemigos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnemigosContext enemigos() {
		EnemigosContext _localctx = new EnemigosContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_enemigos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 78; enemigo();
				State = 79; Match(PUNTO_COMA);
				}
				}
				State = 83;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==IDENT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnemigoContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(LaberintoParser.IDENT, 0); }
		public ITerminalNode DAMAGE() { return GetToken(LaberintoParser.DAMAGE, 0); }
		public EnemigoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enemigo; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.EnterEnemigo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.ExitEnemigo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILaberintoVisitor<TResult> typedVisitor = visitor as ILaberintoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnemigo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnemigoContext enemigo() {
		EnemigoContext _localctx = new EnemigoContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_enemigo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(IDENT);
			State = 86; Match(DAMAGE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BloqueContext : ParserRuleContext {
		public ITerminalNode LLAVE_A() { return GetToken(LaberintoParser.LLAVE_A, 0); }
		public StartContext start() {
			return GetRuleContext<StartContext>(0);
		}
		public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public ITerminalNode LLAVE_C() { return GetToken(LaberintoParser.LLAVE_C, 0); }
		public LocalizacionesContext localizaciones() {
			return GetRuleContext<LocalizacionesContext>(0);
		}
		public BloqueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bloque; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.EnterBloque(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.ExitBloque(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILaberintoVisitor<TResult> typedVisitor = visitor as ILaberintoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBloque(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BloqueContext bloque() {
		BloqueContext _localctx = new BloqueContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_bloque);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(LLAVE_A);
			State = 89; start();
			State = 90; end();
			State = 92;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENT) {
				{
				State = 91; localizaciones();
				}
			}

			State = 94; Match(LLAVE_C);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartContext : ParserRuleContext {
		public ITerminalNode INICIO() { return GetToken(LaberintoParser.INICIO, 0); }
		public CoordContext coord() {
			return GetRuleContext<CoordContext>(0);
		}
		public ITerminalNode PUNTO_COMA() { return GetToken(LaberintoParser.PUNTO_COMA, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILaberintoVisitor<TResult> typedVisitor = visitor as ILaberintoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(INICIO);
			State = 97; coord();
			State = 98; Match(PUNTO_COMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		public ITerminalNode FINAL() { return GetToken(LaberintoParser.FINAL, 0); }
		public CoordContext coord() {
			return GetRuleContext<CoordContext>(0);
		}
		public ITerminalNode PUNTO_COMA() { return GetToken(LaberintoParser.PUNTO_COMA, 0); }
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.EnterEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.ExitEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILaberintoVisitor<TResult> typedVisitor = visitor as ILaberintoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(FINAL);
			State = 101; coord();
			State = 102; Match(PUNTO_COMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalizacionesContext : ParserRuleContext {
		public LocalizacionContext[] localizacion() {
			return GetRuleContexts<LocalizacionContext>();
		}
		public LocalizacionContext localizacion(int i) {
			return GetRuleContext<LocalizacionContext>(i);
		}
		public LocalizacionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localizaciones; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.EnterLocalizaciones(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.ExitLocalizaciones(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILaberintoVisitor<TResult> typedVisitor = visitor as ILaberintoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalizaciones(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalizacionesContext localizaciones() {
		LocalizacionesContext _localctx = new LocalizacionesContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_localizaciones);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; localizacion();
			State = 108;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==IDENT) {
				{
				{
				State = 105; localizacion();
				}
				}
				State = 110;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalizacionContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(LaberintoParser.IDENT, 0); }
		public CoordenadasContext coordenadas() {
			return GetRuleContext<CoordenadasContext>(0);
		}
		public ITerminalNode PUNTO_COMA() { return GetToken(LaberintoParser.PUNTO_COMA, 0); }
		public LocalizacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localizacion; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.EnterLocalizacion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.ExitLocalizacion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILaberintoVisitor<TResult> typedVisitor = visitor as ILaberintoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalizacion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalizacionContext localizacion() {
		LocalizacionContext _localctx = new LocalizacionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_localizacion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(IDENT);
			State = 112; coordenadas();
			State = 113; Match(PUNTO_COMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoordenadasContext : ParserRuleContext {
		public CoordContext[] coord() {
			return GetRuleContexts<CoordContext>();
		}
		public CoordContext coord(int i) {
			return GetRuleContext<CoordContext>(i);
		}
		public CoordenadasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coordenadas; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.EnterCoordenadas(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.ExitCoordenadas(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILaberintoVisitor<TResult> typedVisitor = visitor as ILaberintoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoordenadas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoordenadasContext coordenadas() {
		CoordenadasContext _localctx = new CoordenadasContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_coordenadas);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 115; coord();
				}
				}
				State = 118;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==PARENTA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoordContext : ParserRuleContext {
		public IToken num1;
		public IToken num2;
		public ITerminalNode PARENTA() { return GetToken(LaberintoParser.PARENTA, 0); }
		public ITerminalNode PARENTC() { return GetToken(LaberintoParser.PARENTC, 0); }
		public ITerminalNode[] NUMERO() { return GetTokens(LaberintoParser.NUMERO); }
		public ITerminalNode NUMERO(int i) {
			return GetToken(LaberintoParser.NUMERO, i);
		}
		public ITerminalNode COMA() { return GetToken(LaberintoParser.COMA, 0); }
		public CoordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coord; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.EnterCoord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILaberintoListener typedListener = listener as ILaberintoListener;
			if (typedListener != null) typedListener.ExitCoord(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILaberintoVisitor<TResult> typedVisitor = visitor as ILaberintoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoordContext coord() {
		CoordContext _localctx = new CoordContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_coord);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(PARENTA);
			State = 121; _localctx.num1 = Match(NUMERO);
			State = 123;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMA) {
				{
				State = 122; Match(COMA);
				}
			}

			State = 125; _localctx.num2 = Match(NUMERO);
			State = 126; Match(PARENTC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x18\x83\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\'\n\x2\x3\x2\x5\x2*"+
		"\n\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x5\x4\x35"+
		"\n\x4\x3\x4\x3\x4\x5\x4\x39\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x6\x3\x6\x3\x6\x6\x6\x45\n\x6\r\x6\xE\x6\x46\x3\a\x3\a\x3\a\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x6\tT\n\t\r\t\xE\tU\x3\n\x3\n\x3"+
		"\n\x3\v\x3\v\x3\v\x3\v\x5\v_\n\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\r\x3"+
		"\r\x3\r\x3\r\x3\xE\x3\xE\a\xEm\n\xE\f\xE\xE\xEp\v\xE\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\x10\x6\x10w\n\x10\r\x10\xE\x10x\x3\x11\x3\x11\x3\x11\x5\x11"+
		"~\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x2\x2\x2\x12\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\x2\x2|\x2\"\x3\x2\x2\x2\x4-\x3\x2\x2\x2\x6\x34\x3\x2\x2\x2\b<"+
		"\x3\x2\x2\x2\n\x44\x3\x2\x2\x2\fH\x3\x2\x2\x2\xEK\x3\x2\x2\x2\x10S\x3"+
		"\x2\x2\x2\x12W\x3\x2\x2\x2\x14Z\x3\x2\x2\x2\x16\x62\x3\x2\x2\x2\x18\x66"+
		"\x3\x2\x2\x2\x1Aj\x3\x2\x2\x2\x1Cq\x3\x2\x2\x2\x1Ev\x3\x2\x2\x2 z\x3\x2"+
		"\x2\x2\"#\a\x17\x2\x2#$\x5\x6\x4\x2$&\x5\x4\x3\x2%\'\x5\b\x5\x2&%\x3\x2"+
		"\x2\x2&\'\x3\x2\x2\x2\')\x3\x2\x2\x2(*\x5\xE\b\x2)(\x3\x2\x2\x2)*\x3\x2"+
		"\x2\x2*+\x3\x2\x2\x2+,\x5\x14\v\x2,\x3\x3\x2\x2\x2-.\a\x5\x2\x2./\a\x15"+
		"\x2\x2/\x30\a\x6\x2\x2\x30\x31\a\x15\x2\x2\x31\x32\a\x16\x2\x2\x32\x5"+
		"\x3\x2\x2\x2\x33\x35\a\a\x2\x2\x34\x33\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2"+
		"\x35\x36\x3\x2\x2\x2\x36\x38\a\x15\x2\x2\x37\x39\a\b\x2\x2\x38\x37\x3"+
		"\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39:\x3\x2\x2\x2:;\a\x15\x2\x2;\a\x3\x2"+
		"\x2\x2<=\a\t\x2\x2=>\a\n\x2\x2>?\x5\n\x6\x2?@\a\v\x2\x2@\t\x3\x2\x2\x2"+
		"\x41\x42\x5\f\a\x2\x42\x43\a\f\x2\x2\x43\x45\x3\x2\x2\x2\x44\x41\x3\x2"+
		"\x2\x2\x45\x46\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2G\v\x3"+
		"\x2\x2\x2HI\a\x17\x2\x2IJ\a\x15\x2\x2J\r\x3\x2\x2\x2KL\a\r\x2\x2LM\a\n"+
		"\x2\x2MN\x5\x10\t\x2NO\a\v\x2\x2O\xF\x3\x2\x2\x2PQ\x5\x12\n\x2QR\a\f\x2"+
		"\x2RT\x3\x2\x2\x2SP\x3\x2\x2\x2TU\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2"+
		"\x2V\x11\x3\x2\x2\x2WX\a\x17\x2\x2XY\a\x13\x2\x2Y\x13\x3\x2\x2\x2Z[\a"+
		"\n\x2\x2[\\\x5\x16\f\x2\\^\x5\x18\r\x2]_\x5\x1A\xE\x2^]\x3\x2\x2\x2^_"+
		"\x3\x2\x2\x2_`\x3\x2\x2\x2`\x61\a\v\x2\x2\x61\x15\x3\x2\x2\x2\x62\x63"+
		"\a\xE\x2\x2\x63\x64\x5 \x11\x2\x64\x65\a\f\x2\x2\x65\x17\x3\x2\x2\x2\x66"+
		"g\a\xF\x2\x2gh\x5 \x11\x2hi\a\f\x2\x2i\x19\x3\x2\x2\x2jn\x5\x1C\xF\x2"+
		"km\x5\x1C\xF\x2lk\x3\x2\x2\x2mp\x3\x2\x2\x2nl\x3\x2\x2\x2no\x3\x2\x2\x2"+
		"o\x1B\x3\x2\x2\x2pn\x3\x2\x2\x2qr\a\x17\x2\x2rs\x5\x1E\x10\x2st\a\f\x2"+
		"\x2t\x1D\x3\x2\x2\x2uw\x5 \x11\x2vu\x3\x2\x2\x2wx\x3\x2\x2\x2xv\x3\x2"+
		"\x2\x2xy\x3\x2\x2\x2y\x1F\x3\x2\x2\x2z{\a\x10\x2\x2{}\a\x15\x2\x2|~\a"+
		"\x12\x2\x2}|\x3\x2\x2\x2}~\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\x80\a\x15"+
		"\x2\x2\x80\x81\a\x11\x2\x2\x81!\x3\x2\x2\x2\f&)\x34\x38\x46U^nx}";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace antlr_c.Generated
