/* ----------------------Seccion de declaraciones package e imports--------------------*/

import java_cup.runtime.*;
import java.util.*;

/* ----------------------Seccion componentes de codigo de usuario --------------------*/


parser code{:

    public void syntax_error(String str, int linea, int columna, String mensaje_adicional, boolean fatal){
        
        StringBuffer m = new StringBuffer("");
        if (fatal){
            m.append("Error fatal: ");
        }else{
            m.append("Warning: ");
        }
        
        if (!mensaje_adicional.equals(""))
            m.append(mensaje_adicional);

        //m.append(" en el símbolo "+str);
        
        if (linea >= 0) {                
            m.append(" en línea "+String.valueOf(linea+1));   
            if (columna >= 0)                    
                m.append(" y columna "+String.valueOf(columna+1));
        }

        //m.append("\n");
        System.err.println(m);
    }

    public void report_syntax_error(Object s, int linea, int columna, String mensaje_adicional, boolean fatal) throws Exception{
        if (!(s instanceof String)){
            String str = String.valueOf(s);
            syntax_error(str, linea, columna, mensaje_adicional, fatal);
        }else{
            syntax_error((String)s, linea, columna, mensaje_adicional, fatal);
        }
        if (fatal)
            //System.exit(1);
            throw new Exception();
    }
    
:}
/* ------------Declaracion de la lista de simbolos de la gramatica-----------*/


terminal Integer numero, damage;
terminal String ident, enemigos, use, time, alto, ancho, inicio, end, 
monedas, utemp;
terminal llave_a, llave_c, coma, punto_coma, parenta, parentc;

non terminal S, DIMENSION, DIRECTIVAS, BLOQUE, INICIO, FINAL, MONEDAS, MONEDA, ENEMIGOS, ENEMIGO,
	DEF_MONEDAS, DEF_ENEMIGOS, LOCALIZACIONES, LOCALIZACION, COORDENADAS;
non terminal Coordenada COORD;


/* -------------Declaracion de precedencias -----------*/



/* --------------Declaracion de la gramatica -----------*/

S ::= ident:id DIMENSION:dm DIRECTIVAS:dr DEF_MONEDAS:mn BLOQUE:bq {:Laberinto laberinto = ((Laberinto)bq); 
														laberinto.setNombre(id);
														laberinto.setDirectiva((Directiva)dr);														
														laberinto.setDimension((Integer[])dm); 
														laberinto.setMonedas(((ArrayList<Elemento>)mn));
														Semantica.comprobarLaberinto(laberinto);
														RESULT=laberinto;:}

	| ident:id DIMENSION:dm DIRECTIVAS:dr DEF_ENEMIGOS:en BLOQUE:bq {:Laberinto laberinto = ((Laberinto)bq); 
														laberinto.setNombre(id);
														laberinto.setDirectiva((Directiva)dr);														
														laberinto.setDimension((Integer[])dm); 
														laberinto.setEnemigos(((ArrayList<Elemento>)en));
														Semantica.comprobarLaberinto(laberinto);
														RESULT=laberinto;:}
	| ident:id DIMENSION:dm DIRECTIVAS:dr DEF_MONEDAS:mn DEF_ENEMIGOS:en BLOQUE:bq {:Laberinto laberinto = ((Laberinto)bq); 
														laberinto.setNombre(id);
														laberinto.setDirectiva((Directiva)dr);														
														laberinto.setDimension((Integer[])dm); 
														laberinto.setMonedas(((ArrayList<Elemento>)mn));
														laberinto.setEnemigos(((ArrayList<Elemento>)en));
														Semantica.comprobarLaberinto(laberinto);
														RESULT=laberinto;:}
	| ident:id DIMENSION:dm DIRECTIVAS:dr BLOQUE:bq	{:Laberinto laberinto = ((Laberinto)bq); 
														laberinto.setNombre(id);
														laberinto.setDirectiva((Directiva)dr);														
														laberinto.setDimension((Integer[])dm);
														Semantica.comprobarLaberinto(laberinto);
														RESULT=laberinto;:} ;

DIRECTIVAS ::= use ident:nL time numero:nm utemp:un {:Directiva directiva = new Directiva(nL, nm, un.charAt(0)); RESULT=directiva;:}
			| use ident:nL time numero:nm {:report_syntax_error(String.valueOf(nm), nmleft, nmright, "Falta la unidad de tiempo. Por defecto se entiende que son segundos", false);
							Directiva directiva = new Directiva(nL, nm, 's'); RESULT=directiva;:}
			| use ident:nL numero:nm utemp{:report_syntax_error(String.valueOf(nm), nmleft, nmright, "Falta la palabra time", true);:}
			| ident:nL time numero:nm utemp{:report_syntax_error(String.valueOf(nL), nLleft, nLright, "Falta la palabra use", true);:}
			| ident:nL numero:nm utemp{:report_syntax_error(String.valueOf(nL), nLleft, nLright, "Falta la palabra use", true);:};

DIMENSION ::= alto numero:n1 ancho numero:n2 {:Integer [] dimension = {n1, n2}; RESULT=dimension;:}
			| numero:n1 numero:n2 {:Integer [] dimension = {n1, n2}; RESULT=dimension;:};

DEF_MONEDAS ::= monedas llave_a MONEDAS:lmd llave_c{:RESULT=((ArrayList<Elemento>)lmd);:} 
			| llave_a:ll MONEDAS:lmd llave_c {:report_syntax_error(String.valueOf(ll), llleft, llright, "Falta la palabra monedas", false);
							RESULT=((ArrayList<Elemento>)lmd);:};

MONEDAS ::= MONEDA:md punto_coma {:ArrayList<Elemento> lista = new ArrayList<Elemento>();
							lista.add((Elemento)md) ; RESULT=lista;:}
			| MONEDA:md punto_coma MONEDAS:lmd {:((ArrayList<Elemento>)lmd).add(0, (Elemento)md); RESULT=lmd;:};

MONEDA ::= ident:tp numero:nm {:Elemento elemento = new Elemento(tp, "moneda", nm);
							System.out.println("Tipo: "+elemento.getTipo()); RESULT=elemento; :};

DEF_ENEMIGOS ::= enemigos llave_a ENEMIGOS:len llave_c {:RESULT=((ArrayList<Elemento>)len);:}  
			| llave_a:ll ENEMIGOS:len llave_c {:report_syntax_error(String.valueOf(ll), llleft, llright, "Falta la palabra enemigo", false);
							RESULT=((ArrayList<Elemento>)len);:};

ENEMIGOS ::= ENEMIGO:en punto_coma ENEMIGOS:len {:((ArrayList<Elemento>)len).add(0, (Elemento)en); RESULT=len;:}
			| ENEMIGO:en punto_coma {:ArrayList<Elemento> lista = new ArrayList<Elemento>();
							lista.add((Elemento)en) ; RESULT=lista;:};

ENEMIGO ::= ident:tp damage:dm {:Elemento elemento = new Elemento(tp, "enemigo", dm); RESULT=elemento;:};

BLOQUE ::= llave_a INICIO:ini FINAL:fn LOCALIZACIONES:lc llave_c {:Laberinto laberinto = new Laberinto(((ArrayList<Coordenada>)lc), 
							((Elemento)ini).getCoordenadas().get(0), ((Elemento)fn).getCoordenadas().get(0)); RESULT=laberinto;:}
			| llave_a INICIO:ini FINAL:fn llave_c {:Laberinto laberinto = new Laberinto(((Elemento)ini).getCoordenadas().get(0), 
							((Elemento)fn).getCoordenadas().get(0)); RESULT=laberinto;:};

//BLOQUE ::= llave_a INICIO FINAL LOCALIZACIONES llave_c;

//INICIO ::= inicio COORD:ca punto_coma;
INICIO ::= inicio COORD:cds punto_coma {:ArrayList<Coordenada> loc = new ArrayList<Coordenada>(); loc.add(((Coordenada)cds));
							Elemento elemento = new Elemento("inicio", loc); RESULT=elemento; :};

//FINAL ::= final COORD:ca punto_coma
FINAL ::= end COORD:cds punto_coma {:ArrayList<Coordenada> loc = new ArrayList<Coordenada>(); loc.add(((Coordenada)cds));
							Elemento elemento = new Elemento("final", loc); RESULT=elemento; :};

LOCALIZACIONES ::= LOCALIZACION:lc {:ArrayList<Elemento> lista = new ArrayList<Elemento>();
							lista.add((Elemento)lc); RESULT=lista;:}
			| LOCALIZACION:lc LOCALIZACIONES:lcs {:((ArrayList<Elemento>)lcs).add(0, (Elemento)lc); System.out.println(lcs);RESULT=lcs;:};

LOCALIZACION ::= ident:tp COORDENADAS:cds punto_coma {:Elemento elemento = new Elemento(tp, ((ArrayList<Coordenada>)cds));
							System.out.println("Tipo: "+elemento.getTipo()); RESULT=elemento;:};

COORDENADAS ::= COORD:cd {:ArrayList<Coordenada> lista = new ArrayList<Coordenada>();
							lista.add((Coordenada)cd) ; RESULT=lista;:}
			| COORD:cd COORDENADAS:lc {:((ArrayList<Coordenada>)lc).add(0, (Coordenada)cd); System.out.println(lc);RESULT=lc;:};

/*LOCALIZACION ::=  ident COORD punto_coma {:System.out.println("Loc leida");:};

LOC_ENEMIGOS ::= LOC_ENEMIGO punto_coma
	| LOC_ENEMIGO punto_coma LOC_ENEMIGOS;

LOC_ENEMIGO ::= enemigo ident COORD punto_coma;*/

COORD ::= parenta numero:nx coma numero:ny parentc {:System.out.println("Coordenada leida");  RESULT =new Coordenada(nx, ny);:}
		| parenta numero:nx numero:ny parentc {:report_syntax_error(String.valueOf(ny), nyleft, nyright, "Falta una coma entre los valores "+nx+" y "+ny+" de la coordenada", false);
							RESULT =new Coordenada(nx, ny);:}
		| numero:nx coma numero:ny {:report_syntax_error(String.valueOf(ny), nyleft, nyright, "Las coordenadas deben ir entre parentesis \"(\" \")\"", false);
							RESULT =new Coordenada(nx, ny);:}
		| numero:nx numero:ny {:report_syntax_error(String.valueOf(ny), nyleft, nyright, 
							"Las coordenadas deben ir entre parentesis \"(\" \")\" y con coma entre los valores "+nx+" y "+ny, false);  
							RESULT =new Coordenada(nx, ny);:};
